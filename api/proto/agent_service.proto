// agent_server/proto/agent_service.proto

syntax = "proto3";

package proto;

import "google/protobuf/timestamp.proto";

option go_package = "agent_server/proto"; 

// --------------------------- Enums (تحسين) ---------------------------
enum AgentStatus {
    UNKNOWN = 0;
    ONLINE = 1;
    OFFLINE = 2;
    DECOMMISSIONED = 3; 
}
// Outbound traffic و Inbound traffic
enum FirewallDirection {
    DIRECTION_UNKNOWN = 0;
    DIRECTION_IN = 1;
    DIRECTION_OUT = 2;
}

enum FirewallAction {
    ACTION_UNKNOWN = 0;
    ALLOW = 1;
    DENY = 2;
}

// --------------------------- SERVICES (الخدمات) ---------------------------
service AgentService {
    // 1. التسجيل
    rpc RegisterAgent(RegisterRequest) returns (RegisterResponse);

    // 2. البحث
    rpc FindAgent(FindAgentRequest) returns (FindAgentResponse);

    // 3. إرسال نبضة دورية لتحديث الحالة
    rpc SendHeartbeat(HeartbeatRequest) returns (HeartbeatResponse); 

    // 4. إرسال تقرير بقواعد جدار الحماية
    rpc ReportFirewallStatus(FirewallStatusRequest) returns (FirewallStatusResponse);
   
    // 5. إرسال تقرير بالتطبيقات المثبتة
    rpc ReportInstalledApps(InstalledAppsRequest) returns (InstalledAppsResponse);


   // --------------------------- SERVICES (متعلق السيرفر يرسل للوكيل) ---------------------------
    // لم يتم التنفيذ بعد
    // 6. تكوين جدار الحماية: السيرفر يرسل أمر للوكيل لتعديل إعدادات جدار الحماية
    rpc ConfigureFirewall(FirewallConfigurationRequest) returns (FirewallConfigurationResponse);

    // نفتح  قناة اتصال ثنائية الاتجاه
   rpc TaskChannel(stream TaskResult) returns (stream TaskRequest);

}


// --------------------------- MESSAGES (الرسائل) ---------------------------
// رسالة من السيرفر إلى العميل
message TaskRequest {
  string task_id = 1;      // معرف فريد لكل مهمة
  string command_name = 2; // اسم الأمر المطلوب (e.g., "get_processes", "get_users")
  map<string, string> params = 3; // أي متغيرات للأمر (e.g., {"path": "/etc"})
}

// رسالة من العميل إلى السيرفر
message TaskResult {
  string task_id = 1;      // نفس معرف المهمة لتسهيل الربط
  bool success = 2;        // هل نجحت المهمة؟
  string payload = 3;      // البيانات الفعلية (e.g., JSON string of processes)
  string error_message = 4; // رسالة الخطأ في حال الفشل
}
// --- رسائل التسجيل والبحث والنبضة ---

// رسالة موحدة تمثل العميل بكل تفاصيله
message Agent {
    string agent_id = 1;       
    string hostname = 2;
    
    // معلومات نظام التشغيل
    string os_name = 3;
    string os_version = 4;
    string kernel_version = 5;

    // معلومات العتاد
    int32 cpu_cores = 6;
    double memory_gb = 7;
    double disk_space_gb = 8;
    
    // معلومات الحالة والشبكة المحدثة
    AgentStatus status = 9;                        
    google.protobuf.Timestamp last_seen = 10;      
    string last_known_ip = 11;                     
}

message RegisterRequest {
    Agent agent_details = 1; 
}
// يامر الوكيل عند التسجيل سوف يرجع هاذي يامر الوكيل بارسال لي نبظه كل خمس داقائق 
message RegisterResponse {
    bool success = 1;
    string message = 2;
    int32 report_interval_seconds = 3;
}

message FindAgentRequest {
    string agent_id = 1;
}

message FindAgentResponse {
    bool found = 1;
    Agent agent = 2; 
}

message HeartbeatRequest {
    string agent_id = 1;
    string current_ip = 2; 
}

message HeartbeatResponse {
    bool acknowledged = 1; 
}


// --- رسائل تقرير جدار الحماية ---

message FirewallRule {
    string name = 1;
    string port = 2;
    string protocol = 3;
    FirewallAction action = 4; 
    FirewallDirection direction = 5;
    bool enabled = 6;
}

message FirewallStatusRequest {
    string agent_id = 1;
    repeated FirewallRule rules = 2;
}

message FirewallStatusResponse {
    bool success = 1;
    string message = 2;
}

// --- رسائل تقرير التطبيقات المثبتة ---

message ApplicationInfo {
    string name = 1;
    string version = 2;
    string publisher = 3;
    google.protobuf.Timestamp install_date = 4; 
}

message InstalledAppsRequest {
    string agent_id = 1;
    repeated ApplicationInfo apps = 2;
}

message InstalledAppsResponse {
    bool success = 1;
    string message = 2;
}


// <<<<<<<<<<<<<< رسائل إدارة وتكوين جدار الحماية  >>>>>>>>>>>>>>

// رسالة لتحديد تفاصيل إضافة قاعدة جديدة لجدار الحماية
message AddFirewallRuleRequest {
    FirewallRule rule = 1; // القاعدة الكاملة المراد إضافتها
}




message UpdateFirewallRuleRequest {
    string target_rule_name = 1; // اسم القاعدة المراد تعديلها (مفتاح البحث)
    FirewallRule new_rule_details = 2; // التفاصيل الجديدة للقاعدة (مع اسمها الجديد إن وجد)
}

// رسالة لتحديد تفاصيل حذف قاعدة جدار حماية
message DeleteFirewallRuleRequest {
    string rule_name = 1; // اسم القاعدة  
}

// رسالة لطلب تفعيل جدار الحماية بالكامل
message EnableFirewallRequest {

}

// رسالة لطلب تعطيل جدار الحماية بالكامل
message DisableFirewallRequest {
    
}

// الرسالة الرئيسية لطلب تكوين جدار الحماية (السيرفر -> الوكيل)

// استخدمنا ال oneof لنظمن رساله واحده ونخفف العبئ
message FirewallConfigurationRequest {
    string agent_id = 1;

    oneof operation_type { // يمكن أن يكون أحد هذه الحقول فقط موجودًا
        AddFirewallRuleRequest add_rule = 2;
        UpdateFirewallRuleRequest update_rule = 3;
        DeleteFirewallRuleRequest delete_rule = 4;
        EnableFirewallRequest enable_firewall = 5;
        DisableFirewallRequest disable_firewall = 6;
    }
}

// رسالة الاستجابة لطلب تكوين جدار الحماية (الوكيل -> السيرفر)
message FirewallConfigurationResponse {
    bool success = 1; // هل تمت العملية بنجاح على الوكيل؟
    string message = 2; // رسالة تفصيلية عن النتيجة أو أي خطأ حدث على الوكيل
}