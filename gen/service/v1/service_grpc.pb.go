// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: service/v1/service.proto

package servicev1

import (
	v1 "agent_server/gen/agent/v1"
	v11 "agent_server/gen/server/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// CommandStream هي قناة اتصال ثنائية الاتجاه ومستمرة
	// لجميع أنواع التواصل بين الوكيل والسيرفر.
	CommandStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_CommandStreamClient, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) CommandStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_CommandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], "/agent_server.service.v1.AgentService/CommandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceCommandStreamClient{stream}
	return x, nil
}

type AgentService_CommandStreamClient interface {
	Send(*v1.AgentToServer) error
	Recv() (*v11.ServerToAgent, error)
	grpc.ClientStream
}

type agentServiceCommandStreamClient struct {
	grpc.ClientStream
}

func (x *agentServiceCommandStreamClient) Send(m *v1.AgentToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServiceCommandStreamClient) Recv() (*v11.ServerToAgent, error) {
	m := new(v11.ServerToAgent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// CommandStream هي قناة اتصال ثنائية الاتجاه ومستمرة
	// لجميع أنواع التواصل بين الوكيل والسيرفر.
	CommandStream(AgentService_CommandStreamServer) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) CommandStream(AgentService_CommandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandStream not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_CommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).CommandStream(&agentServiceCommandStreamServer{stream})
}

type AgentService_CommandStreamServer interface {
	Send(*v11.ServerToAgent) error
	Recv() (*v1.AgentToServer, error)
	grpc.ServerStream
}

type agentServiceCommandStreamServer struct {
	grpc.ServerStream
}

func (x *agentServiceCommandStreamServer) Send(m *v11.ServerToAgent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServiceCommandStreamServer) Recv() (*v1.AgentToServer, error) {
	m := new(v1.AgentToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_server.service.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandStream",
			Handler:       _AgentService_CommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/v1/service.proto",
}
